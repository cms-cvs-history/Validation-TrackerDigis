process digivalid = {

	source = PoolRASource { 
          untracked vstring fileNames = { 
                  'file:/afs/cern.ch/cms/data/CMSSW/Validation/TrackerDigis/data/SimHitMuon.root'
          }
          untracked int32 maxEvents = -1
          untracked uint32 debugVebosity = 10
          untracked bool   debugFlag     = true
	}

        include "FWCore/MessageLogger/data/MessageLogger.cfi"
        include "MagneticField/Engine/data/volumeBasedMagneticField.cfi"
        include "SimTracker/SiStripDigitizer/data/SiStripDigi.cfi"
        include "SimTracker/SiPixelDigitizer/data/PixelDigi.cfi"
        include "Geometry/TrackerSimData/data/trackerSimGeometryXML.cfi"
        
        include "Geometry/TrackerGeometryBuilder/data/trackerGeometry.cfi"
        include "Geometry/TrackerNumberingBuilder/data/trackerNumberingGeometry.cfi"

        #include "SimGeneral/HepPDTESSource/data/pdt.cfi"

        #es_module = TrackerGeometricDetESModule {}
        #es_module = TrackerDigiGeometryESModule {}

        module stripvalid = SiStripDigiValid {
          untracked string outputFile = 'stripdigihisto.root'
          untracked bool verbose = true
          InputTag src = siStripDigis
        }

        module pixelvalid  = SiPixelDigiValid {
          untracked string outputFile = 'pixeldigihisto.root'
          InputTag src = siPixelDigis  
        }
  module mix = MixingModule
   {
#      secsource input = PoolRASource
#      {
         #
         # starting 050, you can skip secsource block at all if you don't
         # wnat to model mixing/pileup at all;
         # however, an at least "empty mixing" need to be present if you
         # want to perform Ecal/Hcal/CSC/DT digitization - those explicitely
         # require presence of CrossingFrame in the edm::Event
         #
         # alternatively, you can set averageNumber=0 if you don't want
         # to model the pileup
         #
         # to the secsource/PoolRASource, you can give just 1 file or more;
         # this files will make a "concatinated buffer", which will go circular
         # until the loop of primary events is done - thus, it'll never run out
         #
         # WARNING: you can only give miltiple files, if they're generated with
         #          identical sets of tracked parameters;
         #          for example, you canNOT give a file made with a single muon
         #          gun and a file made with a single pion gun, because PartID
         #          is a *tracked* parameter in the gun's PSet;
         #          however, you can merge together files made with other generators,
         #          for example, PythiaSource, because all parameters of it would be
         #          *untracked*
         #
#         untracked vstring fileNames =
#         {'file:/afs/cern.ch/cms/geant4rep/genntpl/muon_simhit_for_pileup.060pre1.root' }
#         string type = "poisson"
#         double averageNumber = 0  # setting this param. to 0 means "No pile-up",
#                                   # that is, digitize current crossing only
#         int32 minBunch = -3
#         int32 maxBunch = 5
#         int32 seed = 1234567
#      }
      int32 bunchspace = 25
   }



       service = DaqMonitorROOTBackEnd{ }         

       module o1 = PoolOutputModule
       {
         untracked string fileName = "MuonDigi.root"
       }

                                                                                            
	path p = {mix, siStripDigis,siPixelDigis,stripvalid, pixelvalid}

        endpath outpath = { o1 }
}

